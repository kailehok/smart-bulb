{"version":3,"sources":["magicProvider.js","Login.js","Light.js","Buttons.js","App.js","serviceWorker.js","History.js","Register.js","Reg.js","index.js","logo.svg"],"names":["IconConverter","IconService","IconBuilder","IconAmount","httpProvider","HttpProvider","iconService","MagicContext","React","createContext","magic","Magic","extensions","icon","IconExtension","rpcUrl","MagicProvider","children","useState","isLoggedIn","setIsLoggedIn","publicAddress","setPublicAddress","email","setEmail","userMetadata","setUserMetadata","balance","setBalance","useEffect","user","then","magicIsLoggedIn","a","getAccount","parseFloat","getBalance","execute","toNumber","Math","pow","toFixed","getMetadata","toast","error","rawMessage","console","log","JSON","stringify","login","auth","loginWithMagicLink","success","logout","contextObj","loginData","addressData","userBalance","metaData","emailData","Provider","value","withMagicContext","Component","props","Consumer","Login","useContext","Card","fluid","raised","className","Header","as","textAlign","size","Content","Meta","href","rel","target","replace","Button","onClick","labelPosition","color","Icon","name","Input","placeholder","onChange","event","style","backgroundColor","Light","sleep","ms","Promise","resolve","setTimeout","handlerSendTransaction","key","setState","loading","buttonLoading","metadata","txObj","CallTransactionBuilder","from","to","stepLimit","toBigNumber","nid","nonce","version","timestamp","Date","getTime","method","params","build","sendTransaction","txhash","tx","getTransaction","call","CallBuilder","result","state","magicData","bind","this","disabled","cursor","padding","App","centered","Boolean","window","location","hostname","match","history","reverse","historyList","map","index","username","address","handleUsernameChange","handleAddressChange","type","Reg","ReactDOM","render","StrictMode","exact","path","component","History","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.472c2528.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Magic } from \"magic-sdk\";\nimport { IconExtension } from \"@magic-ext/icon\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport IconService from \"icon-sdk-js\";\n\nconst { IconBuilder, IconAmount, IconConverter ,HttpProvider } = IconService;\nconst httpProvider = new HttpProvider('https://bicon.net.solidwallet.io/api/v3');\nconst iconService = new IconService(httpProvider);\n\nconst MagicContext = React.createContext(null);\n\nconst magic = new Magic(\"pk_test_BAD78299B2E4EA9D\", {\n  extensions: {\n    icon: new IconExtension({\n      rpcUrl: \"https://bicon.net.solidwallet.io/api/v3\"\n    })\n  }\n});\n\nexport default function MagicProvider({ children }) {\n\n  const [ isLoggedIn, setIsLoggedIn ] = useState(false);\n  const [ publicAddress, setPublicAddress ] = useState(\"\");\n  const [ email, setEmail ] = useState(\"\");\n  const [ userMetadata, setUserMetadata ] = useState(\"\");\n  const [balance,setBalance]=useState(0);\n\n  useEffect(() => {\n    magic.user.isLoggedIn().then(async magicIsLoggedIn => {\n      setIsLoggedIn(magicIsLoggedIn);\n      if (magicIsLoggedIn) {\n        try{\n          const publicAddress = await magic.icon.getAccount();\n          // const balance = await iconService.getBalance(publicAddress).execute();\n          const balance = parseFloat(IconConverter.toNumber(await iconService.getBalance(publicAddress).execute()) / Math.pow(10, 18),).toFixed(2);\n          setBalance(balance);\n          setPublicAddress(publicAddress);\n          setUserMetadata(await magic.user.getMetadata());\n        \n        } catch(err) {\n          toast.error(err.rawMessage);\n          console.log(JSON.stringify(err));\n        }\n      }\n    });\n  }, [isLoggedIn]);\n\n  const login = async () => {\n    try{\n      await magic.auth.loginWithMagicLink({ email });\n      setIsLoggedIn(true);\n      toast.success(\"Login successful\");\n    } catch (err) {\n      toast.error(err.rawMessage);\n      console.log(JSON.stringify(err));\n    }\n  };\n\n  const logout = async () => {\n    try{\n      await magic.user.logout();\n      setIsLoggedIn(false);\n    } catch(err) {\n      toast.error(err.rawMessage);\n      console.log(JSON.stringify(err));\n    }\n  };\n\n  const contextObj = {\n    magic, \n    loginData: {\n      isLoggedIn\n    },\n    addressData: {\n      publicAddress\n    },\n    userBalance:{\n      balance\n    },\n    metaData: {\n      userMetadata\n    },\n    emailData: {\n      email,\n      setEmail\n    },\n    login,\n    logout\n  };\n\n  return (\n    <MagicContext.Provider value={contextObj}>\n      {children}\n      <ToastContainer />\n    </MagicContext.Provider>\n  );\n}\n\n\nconst withMagicContext = Component => props => {\n  return(\n    <MagicContext.Consumer>\n      {value => <Component {...props} value={value} />}\n    </MagicContext.Consumer>\n  );\n}\n\n\nexport { MagicContext, withMagicContext };","import React, { useContext } from \"react\";\nimport IconService from \"icon-sdk-js\";\n\nimport { MagicContext } from './magicProvider';\n\nimport { Header, Card, Button, Icon, Input } from 'semantic-ui-react';\nimport { FaUserCircle } from \"react-icons/fa\";\nimport { RiLoginCircleLine } from 'react-icons/ri';\n\n\nexport default function Login() {\n    const { loginData, addressData, metaData, emailData, login, logout ,userBalance} = useContext(MagicContext);\n\n    return (\n      <>\n      <Card fluid raised={true} className='p-3' >\n        {!loginData.isLoggedIn ? (\n          <>\n            <Card.Header as='h2' textAlign='center'>\n              <RiLoginCircleLine size={32}/> \n              <Header.Content>Login!!</Header.Content>\n            </Card.Header>\n            <Input \n              placeholder='Email...' \n              onChange={event => emailData.setEmail(event.target.value)}\n            />\n            \n            <Button className='logButton center' style={{backgroundColor:'#6851ff', color: 'white'}} onClick={login}>Send</Button>\n            </>\n        ) : (\n          <>\n            <Card.Header as='h2' textAlign='center'>\n              <FaUserCircle size={32}/> \n              <Header.Content>{metaData.userMetadata.email}</Header.Content>\n            </Card.Header>\n\n            <Card.Meta textAlign='center' >\n                <a href={`https://bicon.tracker.solidwallet.io/address/${addressData.publicAddress}`} rel=\"noopener noreferrer\" target=\"_blank\">\n                  {addressData.publicAddress}\n                </a>\n            </Card.Meta>\n            \n            <Card.Meta textAlign='center'>\n              Balance:{JSON.stringify(userBalance.balance).replace(/\"/g,'')} ICX\n            </Card.Meta>\n\n\n              {/* <Butt onClick={logout}>Logout</button> */}\n              <Button className='logButton center' onClick={logout} icon labelPosition='left' size='small' color='red'>\n                <Icon name='power' />\n                Logout\n              </Button>\n          </>\n        \n        )}\n      </Card>\n      </>\n    );\n}","import React from 'react';\nimport Bulb from 'react-bulb';\n \nconst Light= (props) => (\n    <div className=\"light\">\n        <Bulb\n    size={40}\n    color={props.color}\n  />\n\n    </div>\n  \n);\nexport default Light;","// import React from 'react';\nimport React from \"react\";\nimport IconService from \"icon-sdk-js\";\nimport Light from './Light';\n\nimport { withMagicContext } from './magicProvider';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport { Button } from 'semantic-ui-react';\nimport { IoMdRefresh } from 'react-icons/io';\n\nconst { IconBuilder, IconConverter,HttpProvider} = IconService;\nconst httpProvider = new HttpProvider('https://bicon.net.solidwallet.io/api/v3');\nconst iconService = new IconService(httpProvider);\n\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nclass Buttons extends React.Component{\n    constructor(props) {\n\n        super(props);\n        this.state = {\n            tx:'',\n            color:'white',\n            loading: false,\n            buttonLoading: '',\n            magicData: {}\n        };\n    \n        // I've just put these binding in the constructor \n        // so as not to clock up the render method and they only\n        // get called once during the lifetime of the component\n        // this.handleActionClick = this.handleActionClick.bind(this);\n        this.handlerSendTransaction=this.handlerSendTransaction.bind(this)\n      }\n      \n      async componentDidMount() {\n        await this.getTransaction();\n      }\n    \n    handlerSendTransaction = async (key) => {\n      const {isLoggedIn} = this.props.value.loginData;\n      if(!isLoggedIn){ \n        toast.error(\"Please Login First!!\");\n        return;\n      }\n      this.setState({loading: true, buttonLoading: key});\n\n      try{\n        const { magic } = this.props.value;\n        const metadata = await magic.user.getMetadata();\n    \n        const txObj = new IconBuilder.CallTransactionBuilder()\n          .from(metadata.publicAddress)\n          .to('cx8414e65c32e66d6831c8c4ee25b59f0bf98e080d')\n        //   .value(IconAmount.of(2, IconAmount.Unit.ICX).toLoop())\n          .stepLimit(IconConverter.toBigNumber(1000000))\n          .nid(IconConverter.toBigNumber(3))\n          .nonce(IconConverter.toBigNumber(1))\n          .version(IconConverter.toBigNumber(3))\n          .timestamp(new Date().getTime() * 1000)\n          .method('set_color')\n          .params({\n            \"_color\": key\n          })\n          .build();\n          // console.log(\"called\")\n        const txhash = await magic.icon.sendTransaction(txObj);\n    \n        // setTxHash(txhash);\n        this.setState({tx:txhash,\n            // color:.target.id\n            \n        })\n        toast.success(\"Successfully sent tx to contract\");\n        // console.log(key)\n        // console.log(\"transaction result\", txhash);\n        \n        await sleep(3000);\n\n        await this.getTransaction();\n        \n      }\n      catch(err) {\n        toast.error(err.rawMessage);\n        console.log(JSON.stringify(err));\n      }\n\n      this.setState({loading: false, buttonLoading:''});\n    };\n    // onInputChange=(event)=>{\n    //     console.log(event.target.value)\n    //     this.setState({color:event.target.value});\n       \n    // };\n    getTransaction=async()=>{\n        const call = new IconBuilder.CallBuilder()\n        .to('cx8414e65c32e66d6831c8c4ee25b59f0bf98e080d')\n        .method('get_color')\n        .build()\n\n        // const txnPayload = {\n        //     jsonrpc: '2.0',\n        //     method: 'icx_sendTransaction',\n        //     params: IconConverter.toRawTransaction(txnData),\n        //     id: 50889,\n        //   };\n        try{\n          const result = await iconService.call(call).execute();\n          // const response= await IconBuilder.Call(txObj);\n          // console.log(result)\n          this.setState({color:result})\n        } catch(err) {\n          toast.error(err.rawMessage);\n          console.log(JSON.stringify(err));\n        }\n        \n    }\n\n    render(){\n        return(\n          <>\n            <div className='row d-flex justify-content-center mainContainer'>\n              <div className='col-md-12'>\n                <div className='row d-flex align-items-center justify-content-center buttonContainer'>\n                  <Button color='red bulb-btn' disabled={this.state.loading} loading={this.state.loading && this.state.buttonLoading==='RED'} className='m-4' onClick={()=>this.handlerSendTransaction('RED')} >Red</Button>\n                  <Button color='green bulb-btn' disabled={this.state.loading} loading={this.state.loading && this.state.buttonLoading==='GREEN'} className='m-4' onClick={()=>this.handlerSendTransaction('GREEN') }>Green</Button>\n                  <Button color='blue bulb-btn' disabled={this.state.loading} loading={this.state.loading && this.state.buttonLoading==='BLUE'} className='m-4' onClick={()=>this.handlerSendTransaction('BLUE')}>Blue</Button>\n                  <Button color='yellow bulb-btn' disabled={this.state.loading} loading={this.state.loading && this.state.buttonLoading==='YELLOW'} className='m-4' onClick={()=>this.handlerSendTransaction('YELLOW')}>Yellow</Button>\n                </div>\n\n\n                <div className=\"row d-flex align-items-center justify-content-center bulb\">\n                    <Light color={this.state.color}/>   \n                </div>\n                <div className=\"row d-flex align-items-center justify-content-center mb-2\">\n                  <IoMdRefresh size={32} color='blue' style={{cursor:'pointer'}} onClick={this.getTransaction} />\n                </div>\n                <div className=\"row d-flex align-items-center justify-content-center\">\n                    {this.state.tx ? (\n                    <div>\n                        <h2 style={{color: 'white', padding: '10px', textAlign:'center'}}>Tx Hash:</h2>\n                        <div className=\"info\">\n                        <a\n                            href={`https://bicon.tracker.solidwallet.io/transaction/${this.state.tx}`}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            {this.state.tx}\n                            \n                        </a>\n                        </div>\n                    </div>\n                    ) : (\n                    null\n                    )}\n                \n                </div>\n                <div className=\"row d-flex align-items-center justify-content-center\">\n                  {/* <Button style={refreshBtnStyle} onClick={this.getTransaction}>Refresh</Button> */}\n\n                </div>\n              </div>\n           </div>\n           <ToastContainer />\n          </>\n        );\n    }\n}\nexport default withMagicContext(Buttons);\n\n\n// const Buttons=()=>{\n//     return(\n//         <div className='btn'>\n//             <button onClick={'/'}>Red</button>\n//             <button onClick={'/'}>Green</button>\n//             <button onClick={'/'}>Blue</button>\n//             <button onClick={'/'}>Yellow</button>\n//         </div>\n//     );\n// }\n// export default Buttons;","import React from 'react';\nimport MagicProvider from './magicProvider';\nimport Login from './Login';\nimport Buttons from './Buttons';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Route,Link} from 'react-router-dom';\nimport Home from './Home'\nimport 'semantic-ui-css/semantic.min.css';\nimport './bootstrap-grid.css';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { Card } from 'semantic-ui-react';\n\nfunction App() {\n  return(\n    <MagicProvider>\n        <div style={{backgroundColor:'black'}} className='pb-4 row d-flex align-items-center justify-content-center'>\n            <Card centered style={{backgroundColor:'black', color: 'white'}} className='p-2 m-2' >\n            <h1 className='mainHeader'>SMART BULB</h1>\n            </Card>\n            \n        \n        <div className='faucet'>\n            <a href='https://icon-faucet.ibriz.ai/' rel=\"noopener noreferrer\" target=\"_blank\">Testnet ICX Faucet</a>\n            </div>\n            \n            \n       \n        </div>\n        \n        <div className='row appContainer pt-3'>\n            \n            <div className='col-md-6 col-lg-7 col-sm-12 p-1'>\n                <Buttons />\n            </div>\n            \n            <div className='loginContainer col-md-5 col-lg-4 col-sm-12'>\n                <Login />\n            </div>\n            \n        </div>\n    </MagicProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// import React from 'react';\nimport React from \"react\";\nimport IconService from \"icon-sdk-js\";\nimport Light from './Light';\nimport { Card } from 'semantic-ui-react';\n\nimport { withMagicContext } from './magicProvider';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport { Button } from 'semantic-ui-react';\nimport { IoMdRefresh } from 'react-icons/io';\n\nconst { IconBuilder, IconConverter,HttpProvider} = IconService;\nconst httpProvider = new HttpProvider('https://bicon.net.solidwallet.io/api/v3');\nconst iconService = new IconService(httpProvider);\n\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nclass History extends React.Component{\n    constructor(props) {\n\n        super(props);\n        this.state = {\n            tx:'',\n            color:'white',\n            loading: false,\n            buttonLoading: '',\n            history : [],\n            magicData: {}\n        };\n    \n        // I've just put these binding in the constructor \n        // so as not to clock up the render method and they only\n        // get called once during the lifetime of the component\n        // this.handleActionClick = this.handleActionClick.bind(this);\n        // this.handlerSendTransaction=this.handlerSendTransaction.bind(this)\n      }\n      \n      async componentDidMount() {\n        await this.getTransaction();\n      }\n    \n    // handlerSendTransaction = async (key) => {\n    //   const {isLoggedIn} = this.props.value.loginData;\n    //   if(!isLoggedIn){ \n    //     toast.error(\"Please Login First!!\");\n    //     return;\n    //   }\n    //   this.setState({loading: true, buttonLoading: key});\n\n    // // onInputChange=(event)=>{\n    // //     console.log(event.target.value)\n    // //     this.setState({color:event.target.value});\n       \n    // // };\n    getTransaction=async()=>{\n        const call = new IconBuilder.CallBuilder()\n        .to('cx8414e65c32e66d6831c8c4ee25b59f0bf98e080d')\n        .method('get_history')\n        .build()\n\n        // const txnPayload = {\n        //     jsonrpc: '2.0',\n        //     method: 'icx_sendTransaction',\n        //     params: IconConverter.toRawTransaction(txnData),\n        //     id: 50889,\n        //   };\n        try{\n          const result = await iconService.call(call).execute();\n          // const response= await IconBuilder.Call(txObj);\n          // console.log(result)\n          this.setState({history:result})\n        } catch(err) {\n          toast.error(err.rawMessage);\n          console.log(JSON.stringify(err));\n        }\n        \n    }\n    render(){\n        const history = this.state.history\n        history.reverse()\n        const historyList = history.map((tx,index) =><h5>{index+1}. {tx}</h5>)\n        return(\n          <>\n           <div style={{backgroundColor:'black'}} className='pb-4 row d-flex align-items-center justify-content-center'>\n            <Card centered style={{backgroundColor:'black', color: 'white'}} className='p-2 m-2' >\n            <h1 className='mainHeader'>    History</h1>\n            </Card>\n            </div>\n           \n            <div className='row d-flex justify-content-center mainContainer'>\n          \n              <div className='col-md-12'>\n                \n            \n              \n                    {historyList}\n                \n                <div className=\"row d-flex align-items-center justify-content-center mb-2\">\n                  <IoMdRefresh size={32} color='white' style={{cursor:'pointer'}} onClick={this.getTransaction} />\n                </div>\n                <div className=\"row d-flex align-items-center justify-content-center\">\n                    {this.state.tx ? (\n                    <div>\n                        <h2 style={{color: 'white', padding: '10px', textAlign:'center'}}>Tx Hash:</h2>\n                        <div className=\"info\">\n                        <a\n                            href={`https://bicon.tracker.solidwallet.io/transaction/${this.state.tx}`}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            {this.state.tx}\n                            \n                        </a>\n                        </div>\n                    </div>\n                    ) : (\n                    null\n                    )}\n                \n                </div>\n                <div className=\"row d-flex align-items-center justify-content-center\">\n                  {/* <Button style={refreshBtnStyle} onClick={this.getTransaction}>Refresh</Button> */}\n\n                </div>\n              </div>\n           </div>\n           <ToastContainer />\n          </>\n        );\n    }\n}\nexport default withMagicContext(History);\n\n\n// const Buttons=()=>{\n//     return(\n//         <div className='btn'>\n//             <button onClick={'/'}>Red</button>\n//             <button onClick={'/'}>Green</button>\n//             <button onClick={'/'}>Blue</button>\n//             <button onClick={'/'}>Yellow</button>\n//         </div>\n//     );\n// }\n// export default Buttons;","// import React from 'react';\nimport MagicProvider from './magicProvider';\nimport React from \"react\";\nimport Login from\"./Login\";\nimport IconService from \"icon-sdk-js\";\n// import Light from './Light';\nimport { Card } from 'semantic-ui-react';\nimport { withMagicContext } from './magicProvider';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport { Button } from 'semantic-ui-react';\nimport { IoMdRefresh } from 'react-icons/io';\n\nconst { IconBuilder, IconConverter,HttpProvider} = IconService;\nconst httpProvider = new HttpProvider('https://bicon.net.solidwallet.io/api/v3');\nconst iconService = new IconService(httpProvider);\n\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n\n\nclass Register extends React.Component{\n    constructor(props) {\n\n        super(props);\n        this.state = {\n            tx:'',\n            color:'white',\n            loading: false,\n            buttonLoading: '',\n            magicData: {},\n            username:'',\n            address: '',\n            magicData: {}\n        };\n    \n        // I've just put these binding in the constructor \n        // so as not to clock up the render method and they only\n        // get called once during the lifetime of the component\n        // this.handleActionClick = this.handleActionClick.bind(this);\n        this.handlerSendTransaction=this.handlerSendTransaction.bind(this)\n        this.handleUsernameChange=this.handleUsernameChange.bind(this)\n        this.handleAddressChange=this.handleAddressChange.bind(this)\n      }\n\n    handleUsernameChange(event) {\n    this.setState({username: event.target.value});\n  }\n  handleAddressChange(event) {\n    this.setState({address: event.target.value});\n  }\n      \n    \n    handlerSendTransaction = async (username,address) => {\n      const {isLoggedIn} = this.props.value.loginData;\n      if(!isLoggedIn){ \n        toast.error(\"Please Login First!!\");\n        return;\n      }\n     \n\n      try{\n        const { magic } = this.props.value;\n        const metadata = await magic.user.getMetadata();\n    \n        const txObj = new IconBuilder.CallTransactionBuilder()\n          .from(metadata.publicAddress)\n          .to('cx8414e65c32e66d6831c8c4ee25b59f0bf98e080d')\n        //   .value(IconAmount.of(2, IconAmount.Unit.ICX).toLoop())\n          .stepLimit(IconConverter.toBigNumber(1000000))\n          .nid(IconConverter.toBigNumber(3))\n          .nonce(IconConverter.toBigNumber(1))\n          .version(IconConverter.toBigNumber(3))\n          .timestamp(new Date().getTime() * 1000)\n          .method('register')\n          .params({\n            \"_username\": username,\n            \"_address\": address\n          })\n          .build();\n          // console.log(\"called\")\n        const txhash = await magic.icon.sendTransaction(txObj);\n    \n        // setTxHash(txhash);\n        this.setState({tx:txhash,\n            // color:.target.id\n            \n        })\n        toast.success(\"Successfully sent tx to contract\");\n        // console.log(key)\n        // console.log(\"transaction result\", txhash);\n        \n        await sleep(3000);\n\n        \n      }\n      catch(err) {\n        toast.error(err.rawMessage);\n        console.log(JSON.stringify(err));\n      }\n\n      this.setState({loading: false, buttonLoading:''});\n    };\n    // onInputChange=(event)=>{\n    //     console.log(event.target.value)\n    //     this.setState({color:event.target.value});\n       \n    // };\n   \n    render(){\n        return(\n\n          <>\n       \n        \n           <div style={{backgroundColor:'black'}} className='pb-4 row d-flex align-items-center justify-content-center'>\n            <Card centered style={{backgroundColor:'black', color: 'white'}} className='p-2 m-2' >\n            <h1 className='mainHeader'>    Register </h1>\n            </Card>\n            </div>\n            <div className='row d-flex justify-content-center mainContainer'>\n              <div className='col-md-12'>\n                <div className='row d-flex align-items-center justify-content-center buttonContainer'>\n                <label>\n            Username:\n            <input type=\"text\" value={this.state.username} onChange={this.handleUsernameChange} />\n            {console.log(this.state.username)}\n          </label>\n          \n              \n                 \n        \n\n                </div>\n                <div className='row d-flex align-items-center justify-content-center buttonContainer'>\n                <label>\n            Wallet Address:\n            <input type=\"text\" value={this.state.address} onChange={this.handleAddressChange} />\n          </label>\n\n                </div>\n                <div className='row d-flex align-items-center justify-content-center buttonContainer'>\n          <Button color='red bulb-btn' disabled={this.state.loading} loading={this.state.loading && this.state.buttonLoading==='RED'} className='m-4' onClick={()=>this.handlerSendTransaction(this.state.username,this.state.address)} >Register</Button>\n            </div>\n\n                <div className=\"row d-flex align-items-center justify-content-center\">\n                    {this.state.tx ? (\n                    <div>\n                        <h2 style={{color: 'white', padding: '10px', textAlign:'center'}}>Tx Hash:</h2>\n                        <div className=\"info\">\n                        <a\n                            href={`https://bicon.tracker.solidwallet.io/transaction/${this.state.tx}`}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            {this.state.tx}\n                            \n                        </a>\n                        </div>\n                    </div>\n                    ) : (\n                    null\n                    )}\n                \n                </div>\n                <div className=\"row d-flex align-items-center justify-content-center\">\n                  {/* <Button style={refreshBtnStyle} onClick={this.getTransaction}>Refresh</Button> */}\n\n                </div>\n              </div>\n           </div>\n           <ToastContainer />\n          </>\n       \n        );\n    }\n}\nexport default withMagicContext(Register);\n\n\n// const Buttons=()=>{\n//     return(\n//         <div className='btn'>\n//             <button onClick={'/'}>Red</button>\n//             <button onClick={'/'}>Green</button>\n//             <button onClick={'/'}>Blue</button>\n//             <button onClick={'/'}>Yellow</button>\n//         </div>\n//     );\n// }\n// export default Buttons;","import React from 'react';\nimport MagicProvider from './magicProvider';\nimport Register from './Register';\nimport Login from './Login';\nimport Buttons from './Buttons';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Route,Link} from 'react-router-dom';\nimport Home from './Home'\nimport 'semantic-ui-css/semantic.min.css';\nimport './bootstrap-grid.css';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { Card } from 'semantic-ui-react';\n\nfunction Reg() {\n  return(\n    <MagicProvider>\n        <div >\n<Register />        \n            \n        </div>\n    </MagicProvider>\n    );\n}\n\nexport default Reg;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter,Route,Link} from 'react-router-dom';\nimport History from './History'\nimport Reg from './Reg'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <Link to = \"/smart-bulb\"> Home</Link>\n    <Link to = \"/register\"> Register</Link>\n    <Link to = \"/history\"> History</Link>\n    <Route exact path = \"/smart-bulb\" component = {App} />\n    <Route exact path = \"/register\" component = {Reg} />\n    <Route exact path = \"/history\" component = {History} />\n    \n    </BrowserRouter>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}